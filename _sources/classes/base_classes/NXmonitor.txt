.. auto-generated by script ../../../../utils/nxdl2rst.py from the NXDL source ../../../../base_classes/NXmonitor.nxdl.xml

.. index::
    ! NXmonitor (base class)
    ! monitor (base class)
    see: monitor (base class); NXmonitor

.. _NXmonitor:

=========
NXmonitor
=========

**Status**:

  base class, extends :ref:`NXobject`, version 1.0

**Description**:

  Template of monitor data. It is similar to the NXdata groups containing
  monitor data and its associated dimension scale, e.g. time_of_flight or
  wavelength in pulsed neutron instruments. However, it may also include
  integrals, or scalar monitor counts, which are often used in both in both
  pulsed and steady-state instrumentation.

**Symbols**:

  No symbol table

**Groups cited**:
  :ref:`NXgeometry`, :ref:`NXlog`

.. index:: NXlog (base class); used in base class, NXgeometry (base class); used in base class

**Structure**:

  .. index:: mode (data field)

  **mode**: :ref:`NX_CHAR <NX_CHAR>`

    Count to a preset value based on either clock time (timer)
    or received monitor counts (monitor).

    Any of these values: ``monitor`` | ``timer``

  .. index:: start_time (data field)

  **start_time**: :ref:`NX_DATE_TIME <NX_DATE_TIME>`

    Starting time of measurement

  .. index:: end_time (data field)

  **end_time**: :ref:`NX_DATE_TIME <NX_DATE_TIME>`

    Ending time of measurement

  .. index:: preset (data field)

  **preset**: :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_ANY <NX_ANY>`}

    preset value for time or monitor

  .. index:: distance (data field)

  **distance**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

    Distance of monitor from sample

  .. index:: range (data field)

  **range[2]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANY <NX_ANY>`}

    Range (X-axis, Time-of-flight, etc.) over which the integral was calculated

  .. index:: integral (data field)

  **integral**: :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_ANY <NX_ANY>`}

    Total integral monitor counts

  .. index:: type (data field)

  **type**: :ref:`NX_CHAR <NX_CHAR>`


    Any of these values: ``Fission Chamber`` | ``Scintillator``

  .. index:: time_of_flight (data field)

  **time_of_flight[ref(efficiency)]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME_OF_FLIGHT <NX_TIME_OF_FLIGHT>`}

    Time-of-flight

  .. index:: efficiency (data field)

  **efficiency[ref(i)]**: :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`}

    Monitor efficiency

  .. index:: data (data field)

  **data[n]**: :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_ANY <NX_ANY>`}

    Monitor data

    The signal and axes attributes take the same definitions as in :ref:`NXdata`:

    :signal:
      ``signal=1`` means this is the plottable data
    :axes:
      ``axes="names"`` where names are defined as a colon-delimited string 
      within this attribute in the C-order of the data array

    .. index:: signal (attribute)

    **@signal**: :ref:`NX_POSINT <NX_POSINT>`

      as defined for NXdata

    .. index:: axes (attribute)

    **@axes**: :ref:`NX_CHAR <NX_CHAR>`

      as defined for NXdata

  .. index:: sampled_fraction (data field)

  **sampled_fraction**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`}

    Proportion of incident beam sampled by the monitor (0&lt;x&lt;1)

  .. index:: count_time (data field)

  **count_time**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME <NX_TIME>`}

    Elapsed actual counting time, can be an array of size ``np``
    when scanning. This is not the difference of the calendar time
    but the time the instrument was really counting, without
    pauses or times lost due beam unavailability

  **integral_log**: :ref:`NXlog`

    Time variation of monitor counts

  **(geometry)**: :ref:`NXgeometry`

    Geometry of the monitor

**Source**:
  Automatically generated from https://github.com/nexusformat/definitions/blob/master/base_classes/NXmonitor.nxdl.xml
