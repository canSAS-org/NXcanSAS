.. auto-generated by script ../../../../utils/nxdl2rst.py from the NXDL source ../../../../applications/NXtas.nxdl.xml

.. index::
    ! NXtas (application definition)
    ! tas (application definition)
    see: tas (application definition); NXtas

.. _NXtas:

=====
NXtas
=====

**Status**:

  application definition, extends :ref:`NXobject`, version 1.0b

**Description**:

  This is an application definition for a triple axis spectrometer. It is for the trademark
  scan of the TAS, the Q-E scan. For your alignment scans use the rules in NXscan.

**Symbols**:

  No symbol table

**Groups cited**:
  :ref:`NXcrystal`, :ref:`NXdata`, :ref:`NXdetector`, :ref:`NXentry`, :ref:`NXinstrument`, :ref:`NXmonitor`, :ref:`NXsample`, :ref:`NXsource`

.. index:: NXentry (base class); used in application definition, NXinstrument (base class); used in application definition, NXsource (base class); used in application definition, NXcrystal (base class); used in application definition, NXdetector (base class); used in application definition, NXsample (base class); used in application definition, NXmonitor (base class); used in application definition, NXdata (base class); used in application definition

**Structure**:

  **entry**: :ref:`NXentry`


    .. index:: title (data field)

    **title**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: start_time (data field)

    **start_time**: :ref:`NX_DATE_TIME <NX_DATE_TIME>`


    .. index:: definition (data field)

    **definition**: :ref:`NX_CHAR <NX_CHAR>`

      Official NeXus NXDL schema to which this file conforms

      Obligatory value:  ``NXtas``

    **(instrument)**: :ref:`NXinstrument`


      **(source)**: :ref:`NXsource`


        .. index:: name (data field)

        **name**: :ref:`NX_CHAR <NX_CHAR>`


        .. index:: probe (data field)

        **probe**: :ref:`NX_CHAR <NX_CHAR>`


          Any of these values: ``neutron`` | ``x-ray``

      **monochromator**: :ref:`NXcrystal`


        .. index:: ei (data field)

        **ei[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ENERGY <NX_ENERGY>`}


        .. index:: rotation_angle (data field)

        **rotation_angle[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


      **analyser**: :ref:`NXcrystal`


        .. index:: ef (data field)

        **ef[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ENERGY <NX_ENERGY>`}


        .. index:: rotation_angle (data field)

        **rotation_angle[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


        .. index:: polar_angle (data field)

        **polar_angle[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


      **(detector)**: :ref:`NXdetector`


        .. index:: data (data field)

        **data[np]**: :ref:`NX_INT <NX_INT>`


        .. index:: polar_angle (data field)

        **polar_angle[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


    **(sample)**: :ref:`NXsample`


      .. index:: name (data field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`

        Descriptive name of sample

      .. index:: qh (data field)

      **qh[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`}


      .. index:: qk (data field)

      **qk[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`}


      .. index:: ql (data field)

      **ql[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`}


      .. index:: en (data field)

      **en[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ENERGY <NX_ENERGY>`}


      .. index:: rotation_angle (data field)

      **rotation_angle[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


      .. index:: polar_angle (data field)

      **polar_angle[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


      .. index:: sgu (data field)

      **sgu[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


      .. index:: sgl (data field)

      **sgl[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


      .. index:: unit_cell (data field)

      **unit_cell[6]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


      .. index:: orientation_matrix (data field)

      **orientation_matrix[9]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`}


    **(monitor)**: :ref:`NXmonitor`


      .. index:: mode (data field)

      **mode**: :ref:`NX_CHAR <NX_CHAR>`

        Count to a preset value based on either clock time (timer)
        or received monitor counts (monitor).

        Any of these values: ``monitor`` | ``timer``

      .. index:: preset (data field)

      **preset**: :ref:`NX_FLOAT <NX_FLOAT>`

        preset value for time or monitor

      .. index:: data (data field)

      **data[np]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANY <NX_ANY>`}

        Total integral monitor counts

    **(data)**: :ref:`NXdata`

      One of the ei,ef,qh,qk,ql,en should get a primary=1 attribute to denote the main scan axis

      **ei** --> /NXentry/NXinstrument/monochromator:NXcrystal/ei


      **ef** --> /NXentry/NXinstrument/analyzer:NXcrystal/ef


      **en** --> /NXentry/NXsample/en


      **qh** --> /NXentry/NXsample/qh


      **qk** --> /NXentry/NXsample/qk


      **ql** --> /NXentry/NXsample/ql


      **data** --> /NXentry/NXinstrument/NXdetector/data


**Source**:
  Automatically generated from https://github.com/nexusformat/definitions/blob/master/applications/NXtas.nxdl.xml
