.. auto-generated by script ../../../../utils/nxdl2rst.py from the NXDL source ../../../../applications/NXtofraw.nxdl.xml

.. index::
    ! NXtofraw (application definition)
    ! tofraw (application definition)
    see: tofraw (application definition); NXtofraw

.. _NXtofraw:

========
NXtofraw
========

**Status**:

  application definition, extends :ref:`NXobject`, version 1.0b

**Description**:

  This is an application definition for raw data from a generic TOF instrument

**Symbols**:

  No symbol table

**Groups cited**:
  :ref:`NXdata`, :ref:`NXdetector`, :ref:`NXentry`, :ref:`NXinstrument`, :ref:`NXmonitor`, :ref:`NXsample`, :ref:`NXuser`

.. index:: NXentry (base class); used in application definition, NXuser (base class); used in application definition, NXinstrument (base class); used in application definition, NXdetector (base class); used in application definition, NXsample (base class); used in application definition, NXmonitor (base class); used in application definition, NXdata (base class); used in application definition

**Structure**:

  **entry**: :ref:`NXentry`


    .. index:: title (data field)

    **title**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: start_time (data field)

    **start_time**: :ref:`NX_DATE_TIME <NX_DATE_TIME>`


    .. index:: definition (data field)

    **definition**: :ref:`NX_CHAR <NX_CHAR>`

      Official NeXus NXDL schema to which this file conforms

      Obligatory value:  ``NXtofraw``

    .. index:: duration (data field)

    **duration**: :ref:`NX_FLOAT <NX_FLOAT>`


    .. index:: run_number (data field)

    **run_number**: :ref:`NX_INT <NX_INT>`


    .. index:: pre_sample_flightpath (data field)

    **pre_sample_flightpath**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

      This is the flight path before the sample position. This can be determined by a chopper,
      by the moderator, or the source itself. In other words: it is the distance to the component
      which gives the T0 signal to the detector electronics. If another component in the
      NXinstrument hierarchy provides this information, this should be a link.

    **user**: :ref:`NXuser`


      .. index:: name (data field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`


    **instrument**: :ref:`NXinstrument`


      **detector**: :ref:`NXdetector`


        .. index:: data (data field)

        **data[ndet, ntimechan]**: :ref:`NX_INT <NX_INT>`


        .. index:: detector_number (data field)

        **detector_number[ndet]**: :ref:`NX_INT <NX_INT>`


        .. index:: distance (data field)

        **distance[ndet]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

          distance to sample for each detector

        .. index:: time_of_flight (data field)

        **time_of_flight[ntimechan]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME_OF_FLIGHT <NX_TIME_OF_FLIGHT>`}


        .. index:: polar_angle (data field)

        **polar_angle[ndet]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}

          polar angle for each detector element

        .. index:: azimuthal_angle (data field)

        **azimuthal_angle[ndet]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}

          polar angle for each detector element

    **(sample)**: :ref:`NXsample`


      .. index:: name (data field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`

        Descriptive name of sample

      .. index:: nature (data field)

      **nature**: :ref:`NX_CHAR <NX_CHAR>`


        Any of these values: ``powder`` | ``liquid`` | ``single crystal``

    **(monitor)**: :ref:`NXmonitor`


      .. index:: mode (data field)

      **mode**: :ref:`NX_CHAR <NX_CHAR>`

        Count to a preset value based on either clock time (timer)
        or received monitor counts (monitor).

        Any of these values: ``monitor`` | ``timer``

      .. index:: preset (data field)

      **preset**: :ref:`NX_FLOAT <NX_FLOAT>`

        preset value for time or monitor

      .. index:: distance (data field)

      **distance**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


      .. index:: data (data field)

      **data[ntimechan]**: :ref:`NX_INT <NX_INT>`


      .. index:: time_of_flight (data field)

      **time_of_flight[ntimechan]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME_OF_FLIGHT <NX_TIME_OF_FLIGHT>`}


      .. index:: integral_counts (data field)

      **integral_counts**: :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`}


    **data**: :ref:`NXdata`


      **data** --> /NXentry/NXinstrument/NXdetector/data


      **detector_number** --> /NXentry/NXinstrument/NXdetector/detector_number


      **time_of_flight** --> /NXentry/NXinstrument/NXdetector/time_of_flight


**Source**:
  Automatically generated from https://github.com/nexusformat/definitions/blob/master/applications/NXtofraw.nxdl.xml
